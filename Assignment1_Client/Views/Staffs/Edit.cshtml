@model Assignment1_Api.Models.Staff

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Staff</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="editStaffForm" asp-action="Edit" asp-route-id="@Model.StaffId">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="StaffId" />
            <div class="form-group mt-3">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group mt-3">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group mt-3">
                <label asp-for="Role" class="control-label"></label>
                @if (Model.Role == 1)
                {
                    <input readonly value="Admin" class="form-control" />

                }
                else
                {
                    <input readonly value="Customer" class="form-control" />
                }
                <span asp-validation-for="Role" class="text-danger"></span>
            </div>
            <div class="form-group mt-3">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        document.getElementById("editStaffForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Ngăn chặn hành động submit mặc định của form

            const formData = new FormData(document.getElementById("editStaffForm"));
            const requestData = {};

            // Lọc và xử lý dữ liệu từ formData
            for (const [key, value] of formData.entries()) {
                // Loại bỏ các giá trị không hợp lệ
                if (value !== null && value !== undefined && value !== "") {
                    requestData[key] = value;
                }
            }

            console.log("Request Data:", requestData);

            const editStaffUrl = `http://localhost:5267/api/Staffs/${@Model.StaffId}`;

            fetch(editStaffUrl, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    console.log(response);
                    return response;
                })
                .then(data => {
                    console.log('Staff updated successfully:', data);
                    window.location.replace("http://localhost:5207/Staffs");
                    alert('Staff updated successfully');
                })
                .catch(error => {
                    console.error('Error updating Staff:', error);
                    alert('Error updating Staff');
                });
        });
    </script>
}

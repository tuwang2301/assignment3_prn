@model Assignment1_Api.Models.Product

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit Product</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="editProductForm" asp-action="Edit" asp-route-id="@Model.ProductId">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ProductId" />

            <div class="form-group mt-3">
                <label asp-for="ProductName" class="control-label"></label>
                <input asp-for="ProductName" class="form-control" />
                <span asp-validation-for="ProductName" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <label asp-for="CategoryId" class="control-label">Category</label>
                <select asp-for="CategoryId" id="CategoryId" class="form-control">
                    @foreach (var category in (List<Assignment1_Api.Models.Category>)ViewData["Categories"])
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <label asp-for="UnitPrice" class="control-label"></label>
                <input asp-for="UnitPrice" class="form-control" />
                <span asp-validation-for="UnitPrice" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Save Changes" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="mt-3">
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        document.getElementById("editProductForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Ngăn chặn hành động submit mặc định của form

            const formData = new FormData(document.getElementById("editProductForm"));
            const requestData = {};

            // Lọc và xử lý dữ liệu từ formData
            for (const [key, value] of formData.entries()) {
                // Loại bỏ các giá trị không hợp lệ
                if (value !== null && value !== undefined && value !== "") {
                    requestData[key] = value;
                }
            }

            console.log("Request Data:", requestData);

            const editProductUrl = `http://localhost:5267/api/Products/${@Model.ProductId}`;

            fetch(editProductUrl, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Product updated successfully:', data);
                })
                .catch(error => {
                    console.error('Error updating product:', error);
                });
        });
    </script>
}
